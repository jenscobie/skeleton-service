buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-vagrant-plugin:2.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
    }
}

plugins {
    id 'application'
    id 'com.bmuschko.vagrant' version '2.0'
    id 'com.github.johnrengelman.shadow' version '1.2.1'
    id 'groovy'
    id 'idea'
    id 'sonar-runner'
}

project.buildDir = 'target'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'io.dropwizard:dropwizard-core:0.8.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.3'
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
}

sourceSets {
    acceptanceTest {
        groovy.srcDir "src/acceptance/groovy"
        resources.srcDir "src/acceptance/resources"
        compileClasspath += test.compileClasspath
        runtimeClasspath += test.runtimeClasspath
    }
}

idea {
    module {
        testSourceDirs += file('src/contract/groovy')
    }
    project {
        ipr {
            withXml { provider ->
                provider.node.component
                        .find { it.@name == 'VcsDirectoryMappings' }
                        .mapping.@vcs = 'Git'
            }
        }
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://192.168.50.5:9000"
        property "sonar.jdbc.url", "jdbc:h2:tcp://192.168.50.5:9092/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
    }
}

mainClassName = "com.example.helloworld.HelloWorldApplication"

jar {
    manifest {
        attributes("Main-Class": mainClassName)
    }
}

run {
    args "server", './src/main/resources/hello-world.yml'
}

def DEPLOYMENT = 'Deployment'

task dist(dependsOn: shadowJar) {
    group DEPLOYMENT
    description 'Create a debian package with application and infrastructure code'
}

task boot(dependsOn: vagrantUp) {
    group DEPLOYMENT
    description 'Ensure a local virtual machine is running'
}

task destroy(dependsOn: vagrantDestroy) {
    group DEPLOYMENT
    description 'Destroy the currently running local virtual machine'
}

task acceptance(type: Test) {
    testClassesDir = sourceSets.acceptanceTest.output.classesDir
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}

task precommit(dependsOn: [test, dist, boot, acceptance]) {
    group 'Verification'
    description 'Run all validations before pushing code'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}